/*
 *  Copyright (c) 2025, WSO2 LLC. (https://www.wso2.com).
 *
 *  WSO2 LLC. licenses this file to you under the Apache License,
 *  Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 */

 package org.wso2.carbon.${connectorName}connector;

 import com.google.gson.JsonElement;
 import com.google.gson.JsonObject;
 import com.google.gson.JsonParser;
 import org.apache.commons.lang3.StringUtils;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 import org.apache.http.HttpEntity;
 import org.apache.http.NameValuePair;
 import org.apache.http.client.entity.UrlEncodedFormEntity;
 import org.apache.http.client.methods.CloseableHttpResponse;
 import org.apache.http.client.methods.HttpPost;
 import org.apache.http.impl.client.CloseableHttpClient;
 import org.apache.http.impl.client.HttpClients;
 import org.apache.http.ssl.SSLContextBuilder;
 import org.apache.http.ssl.TrustStrategy;
 import org.apache.http.message.BasicNameValuePair;
 import org.apache.http.util.EntityUtils;
 import org.apache.synapse.MessageContext;
 import org.wso2.carbon.connector.core.AbstractConnector;
 import org.wso2.carbon.connector.core.ConnectException;
 import org.wso2.carbon.connector.core.util.ConnectorUtils;

 import java.io.IOException;
 import java.io.UnsupportedEncodingException;
 import java.net.HttpURLConnection;
 import java.security.cert.X509Certificate;
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.Map;
 import java.util.Objects;

import javax.net.ssl.SSLContext;

 public class ClientCredentialsTokenHandler extends AbstractConnector {

     private static final Log log = LogFactory.getLog(ClientCredentialsTokenHandler.class);
     private static final JsonParser parser = new JsonParser();
     private static final String ERROR_MESSAGE = Constants.GENERAL_ERROR_MSG + "\"clientId\", \"clientSecret\"," +
             " \"tokenEndpoint\", \"refreshToken\" parameters are mandatory.";

     @Override
     public void connect(MessageContext messageContext) throws ConnectException {

         String connectionName = (String) ConnectorUtils.
                 lookupTemplateParamater(messageContext, Constants.CONNECTION_NAME);

         String base = (String) getParameter(messageContext, Constants.BASE);
         if (StringUtils.endsWith(base, "/")) {
             base = StringUtils.removeEnd(base, "/");
         }
         messageContext.setProperty(Constants.PROPERTY_BASE, base);

         String clientId = (String) getParameter(messageContext, Constants.CLIENT_ID);
         String clientSecret = (String) getParameter(messageContext, Constants.CLIENT_SECRET);
         String tokenEndpoint = (String) getParameter(messageContext, Constants.TOKEN_ENDPOINT);
         String refreshToken = (String) getParameter(messageContext, Constants.REFRESH_TOKEN);
         String scope = (String) getParameter(messageContext, Constants.SCOPE);

         if (StringUtils.isBlank(clientId) || StringUtils.isBlank(clientSecret)
                 || StringUtils.isBlank(tokenEndpoint) || StringUtils.isBlank(refreshToken) || StringUtils.isBlank(scope)) {
             Utils.setErrorPropertiesToMessage(messageContext, Constants.ErrorCodes.INVALID_CONFIG, ERROR_MESSAGE);
             handleException(ERROR_MESSAGE, messageContext);
         }

         Map<String, String> payloadParametersMap = new HashMap<>();
         payloadParametersMap.put(Constants.OAuth2.REFRESH_TOKEN, refreshToken);
         payloadParametersMap.put(Constants.OAuth2.GRANT_TYPE, Constants.OAuth2.REFRESH_TOKEN);
         payloadParametersMap.put(Constants.OAuth2.SCOPE, scope);

         String tokenKey = getTokenKey(connectionName, tokenEndpoint, refreshToken, scope, clientId, clientSecret);

         Token token = TokenManager.getToken(tokenKey);
         if (token == null || !token.isActive()) {
             if (token != null && !token.isActive()) {
                 TokenManager.removeToken(tokenKey);
             }
             if (log.isDebugEnabled()) {
                 if (token == null) {
                     log.debug("Token does not exists in token store.");
                 } else {
                     log.debug("Access token is inactive.");
                 }
             }
             token = getAndAddNewToken(tokenKey, messageContext, payloadParametersMap, tokenEndpoint, clientId, clientSecret);
         }
         messageContext.setProperty(Constants.PROPERTY_ACCESS_TOKEN, token.getAccessToken());
     }

     /**
      * Function to retrieve access token from the token store or from the token endpoint.
      *
      * @param tokenKey               The token key
      * @param messageContext         The message context that is generated for processing the message
      * @param payloadParametersMap   The payload parameters map
      * @param tokenEndpoint          The token endpoint
      */
     protected synchronized Token getAndAddNewToken(String tokenKey, MessageContext messageContext,
                                                    Map<String, String> payloadParametersMap, String tokenEndpoint, String clientId, String clientSecret) {

         Token token = getAccessToken(messageContext, payloadParametersMap, tokenEndpoint, clientId, clientSecret);
         TokenManager.addToken(tokenKey, token);
         return token;
     }

     /**
      * Function to retrieve access token from the token endpoint.
      *
      * @param messageContext         The message context that is generated for processing the message
      * @param payloadParametersMap   The payload parameters map
      * @param tokenEndpoint          The token endpoint
      */
     protected Token getAccessToken(MessageContext messageContext, Map<String, String> payloadParametersMap,
                                    String tokenEndpoint, String clientId, String clientSecret) {

         if (log.isDebugEnabled()) {
             log.debug("Retrieving new access token from token endpoint.");
         }

         long curTimeInMillis = System.currentTimeMillis();

         HttpPost postRequest = new HttpPost(tokenEndpoint);

         postRequest.setHeader("Content-Type", "application/x-www-form-urlencoded;charset=UTF-8");
         postRequest.setHeader("Authorization", "Basic " + Utils.encode(clientId + ":" + clientSecret));

         ArrayList<NameValuePair> parameters = new ArrayList<>();
         for (Map.Entry<String, String> entry : payloadParametersMap.entrySet()) {
             parameters.add(new BasicNameValuePair(entry.getKey(), entry.getValue()));
         }

         try {
             postRequest.setEntity(new UrlEncodedFormEntity(parameters));
         } catch (UnsupportedEncodingException e) {
             String errorMessage = Constants.GENERAL_ERROR_MSG + "Error occurred while preparing access token request payload.";
             Utils.setErrorPropertiesToMessage(messageContext, Constants.ErrorCodes.TOKEN_ERROR, errorMessage);
             handleException(errorMessage, messageContext);
         }

         log.info("Requesting access token from token endpoint: " + tokenEndpoint);
         log.info("Request payload: " + parameters);
         log.info("Request: " + postRequest.toString());

         // Below line is to bypass SSL verification -- This should be removed in production
         try (CloseableHttpClient httpClient = createHttpClient();
              CloseableHttpResponse response = httpClient.execute(postRequest)) {
             HttpEntity responseEntity = response.getEntity();

             if (responseEntity == null) {
                 String errorMessage = Constants.GENERAL_ERROR_MSG + "Failed to retrieve access token : No entity received.";
                 Utils.setErrorPropertiesToMessage(messageContext, Constants.ErrorCodes.TOKEN_ERROR, errorMessage);
                 handleException(errorMessage, messageContext);
             }

             int responseStatus = response.getStatusLine().getStatusCode();
             String respMessage = EntityUtils.toString(responseEntity);
             if (responseStatus == HttpURLConnection.HTTP_OK) {
                 JsonElement jsonElement = parser.parse(respMessage);
                 JsonObject jsonObject = jsonElement.getAsJsonObject();
                 String accessToken = jsonObject.get(Constants.OAuth2.ACCESS_TOKEN).getAsString();
                 long expireIn = jsonObject.get(Constants.OAuth2.EXPIRES_IN).getAsLong();
                 return new Token(accessToken, curTimeInMillis, expireIn * 1000);
             } else {
                 String errorMessage = Constants.GENERAL_ERROR_MSG + "Error occurred while retrieving access token. Response: "
                         + "[Status : " + responseStatus + " " + "Message: " + respMessage + "]";
                 Utils.setErrorPropertiesToMessage(messageContext, Constants.ErrorCodes.TOKEN_ERROR, errorMessage);
                 handleException(errorMessage, messageContext);
             }
         } catch (Exception e) {
             String errorMessage = Constants.GENERAL_ERROR_MSG + "Error occurred while retrieving access token.";
             Utils.setErrorPropertiesToMessage(messageContext, Constants.ErrorCodes.TOKEN_ERROR, errorMessage);
             handleException(errorMessage, messageContext);
         }
         return null;
     }

     /**
      * Function to generate the token key.
      *
      * @param connection        The connection name
      * @param tokenEp           The token endpoint
      * @param params            The parameters map
      */
     private String getTokenKey(String connection, String tokenEp, String refreshToken, String scope, String clientId, String clientSecret) {

         return connection + "_" + Objects.hash(tokenEp, refreshToken, scope, clientId, clientSecret);
     }

    // Below method is to bypass SSL verification -- This should be removed in production
     private static CloseableHttpClient createHttpClient() throws Exception {
        // Create SSL Context that trusts all certificates
        SSLContext sslContext = SSLContextBuilder
                .create()
                .loadTrustMaterial(new TrustStrategy() {
                    @Override
                    public boolean isTrusted(X509Certificate[] chain, String authType) {
                        return true;  // Trust all certificates
                    }
                })
                .build();

        // Create HTTP client with custom SSL context
        return HttpClients.custom()
                .setSSLContext(sslContext)
                .setSSLHostnameVerifier((hostname, session) -> true)  // Bypass hostname verification
                .build();
    }
 }
