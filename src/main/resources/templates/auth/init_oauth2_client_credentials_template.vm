<?xml version="1.0" encoding="UTF-8"?>
<!--
 ~  Copyright (c) 2025, WSO2 LLC. (https://www.wso2.com) All Rights Reserved.
 ~
 ~  WSO2 LLC. licenses this file to you under the Apache License,
 ~  Version 2.0 (the "License"); you may not use this file except
 ~  in compliance with the License.
 ~  You may obtain a copy of the License at
 ~
 ~    http://www.apache.org/licenses/LICENSE-2.0
 ~
 ~  Unless required by applicable law or agreed to in writing,
 ~  software distributed under the License is distributed on an
 ~  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 ~  KIND, either express or implied.  See the License for the
 ~  specific language governing permissions and limitations
 ~  under the License.
-->

<template name="init" onError="fault" xmlns="http://ws.apache.org/ns/synapse">
    <parameter name="base" description="The service root URL."/>
    <parameter name="clientId" description="Client ID of the registered application."/>
    <parameter name="clientSecret" description="Client secret of the registered application."/>
    <parameter name="authorizationUrl" description="The URL to obtain authorization code."/>
    <parameter name="tokenEndpoint" description="An HTTP endpoint that can be used to obtain an access token."/>
    <parameter name="redirectUri" description="The redirect URI registered with the authorization server."/>
    <parameter name="scope" description="The scope of the resources that will be accessed."/>
    <parameter name="refreshToken" description="A token that can be used to obtain a new access token."/>
    <parameter name="state" description="An opaque value used to maintain state between the request and the callback."/>
    <parameter name="blocking" description="Whether to use blocking transport"/>
    <sequence>
        <class name="org.wso2.carbon.${connectorName}connector.ClientCredentialsTokenHandler"/>
        <header name="Authorization" expression="fn:concat('Bearer ', $ctx:_OH_INTERNAL_ACCESS_TOKEN_)" scope="transport"/>
        <property name="${connectorName}Blocking" expression="$func:blocking" scope="default" type="STRING"/>
    </sequence>
</template>